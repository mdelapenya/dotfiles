# Set variable for the release notes (https://github.com/github-tools/github-release-notes#installation)
export OBSERVABILITY_GITHUB_TOKEN=$(grep 'oauth_token' ~/.config/hub | cut -d' ' -f4)

# Set the JJBB (https://github.com/elastic/infra/tree/master/flavortown/jjbb)
alias jjbb="docker run --rm -e VAULT_TOKEN=$(cat ~/.vault-token) -e HOME=/jjbb -v $(pwd):/jjbb -w /jjbb --network=host docker.elastic.co/infra/jjbb"

alias loc_elastic='networksetup -switchtolocation Elastic'

# Send a PR to Github
alias pr="hub pull-request -c --assign mdelapenya --draft -p -o --reviewer @elastic/observablt-robots"
alias prbeats="pr -l 'Team:Automation'"
alias prinfra="hub pull-request -c --draft -p -o --reviewer @elastic/observablt-robots"

# Create alias for switching to the workspace
alias ws='cd ~/sourcecode/src/github.com/elastic'

## TO connect to windows
connectWindows() {
  target=${1}
  pushd ~/work/src/github.com/elastic/infra/ansible > /dev/null || exit 1
  echo "Connect to ${what}"
  vault ssh -role bastion -mode otp vmartinez@bastion-jenkins.elastic-ci-prod.gcp.elasticnet.co -F ssh_config -L10500:${target}:3389
  popd > /dev/null
}

## TO connect to Linux
connectLinux() {
  target=${1}
  pushd ~/work/src/github.com/elastic/infra/ansible > /dev/null || exit 1
  echo "Connect to ${what}"
  ssh -F ssh_config vmartinez@${target}
  popd > /dev/null || exit 1
}

## Start local jenkins instance
start-local-jenkins() {
  pushd ~/work/src/github.com/elastic/apm-pipeline-library/local > /dev/null || exit 1
  make start
  open http://localhost:18080/
  popd > /dev/null
}

stop-local-jenkins() {
  pushd ~/work/src/github.com/elastic/apm-pipeline-library/local > /dev/null || exit 1
  make stop
  popd > /dev/null
}

## Start linux worker
start-linux-worker() {
  pushd ~/work/src/github.com/elastic/apm-pipeline-library/local > /dev/null || exit 1
  make start-linux-worker
  popd > /dev/null
}

stop-linux-worker() {
  pushd ~/work/src/github.com/elastic/apm-pipeline-library/local > /dev/null || exit 1
  make stop-linux-worker
  popd > /dev/null
}

start-local-worker() {
  pushd ~/work/src/github.com/elastic/apm-pipeline-library/local > /dev/null || exit 1
  make start-local-worker
  popd > /dev/null
}

stop-local-worker() {
  pushd ~/work/src/github.com/elastic/apm-pipeline-library/local > /dev/null || exit 1
  make stop-local-worker
  popd > /dev/null
}

github-invitations() {
	token=$(vault read secret/jcasc/localhost/base --format=json | jq .data.github_api_personal_access_token --raw-output)
	user=$(vault read secret/jcasc/localhost/base --format=json | jq .data.github_api_username --raw-output)
	curl -s -u "${user}:${token}" https://api.github.com/user/repository_invitations | jq .
}

github-accept-invitation() {
	invitation=${1}
	token=$(vault read secret/jcasc/localhost/base --format=json | jq .data.github_api_personal_access_token --raw-output)
	user=$(vault read secret/jcasc/localhost/base --format=json | jq .data.github_api_username --raw-output)
	curl -u "${user}:${token}" -X PATCH https://api.github.com/user/repository_invitations/${invitation}
}

validate-jenkinsfile() {
  if ~/work/src/github.com/elastic/apm-pipeline-library/.ci/scripts/validate.sh "${1}" ; then
  	echo "INFO: jenkinslint passed for the file '${1}'"
  fi
}

vault-cp() {

	# ensure we were given two command line arguments
	if [[ $# -ne 2 ]]; then
		echo 'usage: vault-cp SOURCE DEST' >&2
		exit 1
	fi

	source=$1
	dest=$2

	# check for dependencies
	if ! command -v jq > /dev/null; then
		echo 'vault-cp: required command "jq" was not found' >&2
		exit 1
	fi

	# check for existing values; this is ugly, but
	# the `vault read` command always exits with 0
	source_json=$(vault read -format=json "$source" 2>&1)
	if [[ $source_json == "No value found at $source" ]]; then
		echo "$source_json" >&2
		exit 1
	fi

	source_data=$(echo "$source_json" | jq '.data')
	[[ -n $DEBUG ]] && printf '%s\n' "$source_data"

	dest_check=$(vault read "$dest" 2>&1 1> /dev/null)
	if [[ $dest_check != "No value found at $dest" ]]; then
		overwrite='n'
		printf 'Destination "%s" already exists...overwrite? [y/N] ' "$dest"
		read -r overwrite

		# only overwrite if user explicitly confirms
		if [[ ! $overwrite =~ ^[Yy]$ ]]; then
			echo 'vault-cp: copying has been aborted' >&2
			exit 1
		fi
	fi

	echo "$source_data" | vault write "$dest" -
}