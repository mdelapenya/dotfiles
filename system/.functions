#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Search in my personal guidelines
lookfor() {
  what=${1}
  echo "Look for ${what}"
  grep -R ${what} ~/work/src/github.com/v1v/guidelines || true
}

## https://github.com/drduh/YubiKey-Guide#connect-with-public-key-authentication
secret () {
	output=~/"${1}".$(date +%s).enc
	gpg --encrypt --armor --output ${output} -r 0x0000 -r 0x0001 -r 0x0002 "${1}" && echo "${1} -> ${output}"
}
reveal () {
	output=$(echo "${1}" | rev | cut -c16- | rev)
	gpg --decrypt --output ${output} "${1}" && echo "${1} -> ${output}"
}


#########
#########   Elastic specific

## TO connect to windows
connectWindows() {
  target=${1}
  pushd ~/work/src/github.com/elastic/infra/ansible > /dev/null || exit 1
  echo "Connect to ${what}"
  vault ssh -role bastion -mode otp vmartinez@bastion-jenkins.elastic-ci-prod.gcp.elasticnet.co -F ssh_config -L10500:${target}:3389
  popd > /dev/null
}

## TO connect to Linux
connectLinux() {
  target=${1}
  pushd ~/work/src/github.com/elastic/infra/ansible > /dev/null || exit 1
  echo "Connect to ${what}"
  ssh -F ssh_config vmartinez@${target}
  popd > /dev/null || exit 1
}

## Start local jenkins instance
start-local-jenkins() {
  pushd ~/work/src/github.com/elastic/apm-pipeline-library/local > /dev/null || exit 1
  make start
  open http://localhost:18080/
  popd > /dev/null
}

stop-local-jenkins() {
  pushd ~/work/src/github.com/elastic/apm-pipeline-library/local > /dev/null || exit 1
  make stop
  popd > /dev/null
}

## Start linux worker
start-linux-worker() {
  pushd ~/work/src/github.com/elastic/apm-pipeline-library/local > /dev/null || exit 1
  make start-linux-worker
  popd > /dev/null
}

stop-linux-worker() {
  pushd ~/work/src/github.com/elastic/apm-pipeline-library/local > /dev/null || exit 1
  make stop-linux-worker
  popd > /dev/null
}

start-local-worker() {
  pushd ~/work/src/github.com/elastic/apm-pipeline-library/local > /dev/null || exit 1
  make start-local-worker
  popd > /dev/null
}

stop-local-worker() {
  pushd ~/work/src/github.com/elastic/apm-pipeline-library/local > /dev/null || exit 1
  make stop-local-worker
  popd > /dev/null
}

github-invitations() {
	token=$(vault read secret/jcasc/localhost/base --format=json | jq .data.github_api_personal_access_token --raw-output)
	user=$(vault read secret/jcasc/localhost/base --format=json | jq .data.github_api_username --raw-output)
	curl -s -u "${user}:${token}" https://api.github.com/user/repository_invitations | jq .
}

github-accept-invitation() {
	invitation=${1}
	token=$(vault read secret/jcasc/localhost/base --format=json | jq .data.github_api_personal_access_token --raw-output)
	user=$(vault read secret/jcasc/localhost/base --format=json | jq .data.github_api_username --raw-output)
	curl -u "${user}:${token}" -X PATCH https://api.github.com/user/repository_invitations/${invitation}
}

validate-jenkinsfile() {
  if ~/work/src/github.com/elastic/apm-pipeline-library/.ci/scripts/validate.sh "${1}" ; then
  	echo "INFO: jenkinslint passed for the file '${1}'"
  fi
}

vault-cp() {

	# ensure we were given two command line arguments
	if [[ $# -ne 2 ]]; then
		echo 'usage: vault-cp SOURCE DEST' >&2
		exit 1
	fi

	source=$1
	dest=$2

	# check for dependencies
	if ! command -v jq > /dev/null; then
		echo 'vault-cp: required command "jq" was not found' >&2
		exit 1
	fi

	# check for existing values; this is ugly, but
	# the `vault read` command always exits with 0
	source_json=$(vault read -format=json "$source" 2>&1)
	if [[ $source_json == "No value found at $source" ]]; then
		echo "$source_json" >&2
		exit 1
	fi

	source_data=$(echo "$source_json" | jq '.data')
	[[ -n $DEBUG ]] && printf '%s\n' "$source_data"

	dest_check=$(vault read "$dest" 2>&1 1> /dev/null)
	if [[ $dest_check != "No value found at $dest" ]]; then
		overwrite='n'
		printf 'Destination "%s" already exists...overwrite? [y/N] ' "$dest"
		read -r overwrite

		# only overwrite if user explicitly confirms
		if [[ ! $overwrite =~ ^[Yy]$ ]]; then
			echo 'vault-cp: copying has been aborted' >&2
			exit 1
		fi
	fi

	echo "$source_data" | vault write "$dest" -
}